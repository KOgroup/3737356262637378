public class GameWorld {

	private Ball ball;
	private ScrollHandler scroller;

	private int i;

	private int midPointY, gameHeight;
	private float runTime = 0;

	private float score = 0;

	private float diff = 1;
	private float mult = 1;

	private GameState currentState;

	private boolean isTimeMode;

	private GameRenderer renderer;

	private float[] scoreBounds;



	public enum GameState {

		READY, RUNNING, MENU, HIGHSCORE, GAMEMODE, HELP

	}

	public GameWorld(int midPointY) {

		currentState = GameState.MENU;
		isTimeMode = false;

		this.midPointY = midPointY;
		gameHeight = 2 * midPointY;

		ball = new Ball(768 / 2, midPointY + 100, 36);
		scroller = new ScrollHandler(this);

		// 0 is null index cuz i is 1
		scoreBounds = new float[] { 0, 80, 200, 400, 700, 1000, 1500, 2000,
				2500, 3000, 3500, 4000, 4500, 5000, 6000, 7000, 10000, 1000000 };

		AssetLoader.bgMusic.setLooping(true);
		AssetLoader.bgMusic.setVolume(AssetLoader.getVOLUMEMUSIC());
		AssetLoader.bgMusic.play();

		i = 1;
		diff = 1;

	}

	public void update(float delta) {

		setColor();

		runTime += delta;
		switch (currentState) {
		case READY:

		case MENU:
			updateReady(delta);
			break;

		case RUNNING:

			updateRunning(delta);
			break;
		default:
			break;
		}

	}

	private void updateReady(float delta) {

		ball.updateReady(runTime);
		scroller.onRestart();

	}

	public void updateRunning(float delta) {

		if (delta > .15f) {
			System.out.println("delta>15");
			delta = .15f;
		}

		if (delta > .10f)
			System.out.println("alarm");
		
		if (!isTimeMode && ball.getVelocityY() < 0 && ball.getY() < 1000) {
			score +=-ball.getVelocityY() * mult / 1000;

		}

		else if (isTimeMode) {
			score += delta * mult;
		}

		ball.update(delta, gameHeight);
		scroller.update(delta, diff);

		if (scroller.collides(ball)
				|| ball.getY() - ball.getRadius() - 50 > gameHeight) {
			renderer.prepareTransition(200, 0, 0, 0.3f);
			AssetLoader.dead.play(AssetLoader.getVOLUMESOUND());
			scroller.stop();
			ball.stop();

			currentState = GameState.HIGHSCORE;

			if (isTimeMode && score > AssetLoader.getHighScoreTime()) {
				AssetLoader.setHighScoreTime(score);

			} else if (!isTimeMode && score > AssetLoader.getHighScoreSur()) {
				AssetLoader.setHighScoreSur(score);

			}

		}

		if (!isTimeMode && scroller.collects(ball)) {
			ball.setTimePassed(0);
			ball.setOnSteroids(true);
		}

		if (ball.getRadius() == 50) {
			mult = 1.8f;
		}

		else {
			mult = 1;
		}

	}

	public void restart() {
		currentState = GameState.READY;
		ball.onRestart(midPointY + 100);
		scroller.onRestart();
		score = 0;
		i = 1;
		diff = 1;
		renderer.setZero();

		currentState = GameState.READY;

	}

	public void setColor() {
		
	
			if (!isTimeMode && score > scoreBounds[i]) {

				i++;
				diff += 0.13;
				renderer.prepareTransition(0, 0, 0, 1.4f);
				AssetLoader.change.play(AssetLoader.getVOLUMESOUND());

			} else if (isTimeMode && score / i > 10) {
				i++;
				
				// diff is counted only once cuz of i
				diff += 0.25;
				renderer.prepareTransition(0, 0, 0, 1.4f);
				AssetLoader.change.play(AssetLoader.getVOLUMESOUND());
			}

		scroller.setVelY(diff);

	}

	public Ball getBall() {
		return ball;

	}

	public ScrollHandler getScroller() {
		return scroller;
	}

	public int getMidPointY() {
		return midPointY;
	}

	public int getScore() {
		return (int) score;
	}

	public void addScore(int increment) {
		score += increment;
	}

	public boolean isReady() {
		return currentState == GameState.READY;
	}

	public void ready() {
		
		renderer.setZero();
		currentState = GameState.READY;
		renderer.prepareTransition(0, 1, 1, 0.3f);
	}

	public void start() {
		currentState = GameState.RUNNING;
	}

	public void menu() {
		currentState = GameState.MENU;
	}

	public boolean isMenu() {
		return currentState == GameState.MENU;
	}

	public boolean isGameMode() {
		return currentState == GameState.GAMEMODE;
	}

	public void setRenderer(GameRenderer renderer) {
		this.renderer = renderer;

	}

	public boolean isHighScore() {
		return currentState == GameState.HIGHSCORE;
	}

	public boolean isRunning() {

		return currentState == GameState.RUNNING;
	}

	public boolean isHelp() {

		return currentState == GameState.HELP;
	}

	public void mode() {

		currentState = GameState.GAMEMODE;
	}

	public void help() {

		currentState = GameState.HELP;
	}

	public boolean isTimeMode() {
		return isTimeMode;
	}

	public void setTimeMode(boolean isTimeMode) {
		this.isTimeMode = isTimeMode;
	}

	public int getI() {
		return i;
	}

	public int getGameHeight() {
		return gameHeight;
	}

	public GameState currentState() {
		return currentState;
	}

	public float[] getScoreBounds() {
		return scoreBounds;
	}

	public void setI(int i) {
		this.i = i;
	}

}
