public class ScrollHandler {

	private TwoPipes pipe1;
	private Smasher smasher1;
	private Squeezer squeezer1;

	private TwoPipes pipe2;
	private Smasher smasher2;
	private Squeezer squeezer2;

	private Specials maxi1, mini1;

	private GameWorld world;
	private Ball ball;

	private int i = -600;

	private int count = 0;

	private float velY;

	public static final int PIPE_GAP = 500;

	private Array<Integer> gaps;

	private Random r;

	public ScrollHandler(GameWorld world1) {
		world=world1;
		this.ball = world1.getBall();
		gaps = new Array<Integer>();
		r = new Random();
		for (int a = 1; a < 7; a++) {
			gaps.add((i * a) + 500);

		}
		pipe1 = new TwoPipes(0, gaps.removeIndex(r.nextInt(2)), 428,
				90, 200, 0, world1.getGameHeight());
		pipe2 = new TwoPipes(300, gaps.removeIndex(0), 428,
				90, 200, 0, world1.getGameHeight());
		squeezer1 = new Squeezer(0, gaps.removeIndex(0), 20,
				90, 100, 0, world1.getGameHeight());
		squeezer2 = new Squeezer(0, gaps.removeIndex(r.nextInt(2)), 20,
				90, 100, 0, world1.getGameHeight());
		smasher1 = new Smasher(0, gaps.removeIndex(r.nextInt(gaps.size)), 768,
				90, 0, 0, world1.getGameHeight());
		smasher2 = new Smasher(0, gaps.removeIndex(r.nextInt(gaps.size)), 768,
				90, 0, 0, world1.getGameHeight());
		

		
		maxi1 = new Specials(r.nextInt(698)+60, -r.nextInt(900)-300, 50, 50, world1.getGameHeight());
		mini1 = new Specials(r.nextInt(698)+60, -r.nextInt(900)-300, 50, 50, world1.getGameHeight());
		
		velY = 310;

	}

	public void updateReady(float delta) {
		onRestart();

	}

	public void update(float delta, float velX) {
		pipe1.update(delta, velX);
		smasher1.update(delta, velX);
		squeezer1.update(delta, velX);

		pipe2.update(delta, velX);
		smasher2.update(delta, velX);
		squeezer2.update(delta, velX);

		

		if (ball.getY() - smasher1.getY() < 350) {
			smasher1.setStart(true);
		} 
		
		if (ball.getY() - smasher2.getY() < 350) {
			smasher2.setStart(true);
		}

		if (!world.isTimeMode()) {
			maxi1.update(delta);
			mini1.update(delta);
			if (ball.getVelocityY() < 0 && ball.getY() < 1000) {
				pipe1.setVelocityY((float) (-ball.getVelocityY() * 1.6));
				smasher1.setVelocityY((float) (-ball.getVelocityY() * 1.6));
				squeezer1.setVelocityY((float) (-ball.getVelocityY() * 1.6));

				pipe2.setVelocityY((float) (-ball.getVelocityY() * 1.6));
				smasher2.setVelocityY((float) (-ball.getVelocityY() * 1.6));
				squeezer2.setVelocityY((float) (-ball.getVelocityY() * 1.6));

				maxi1.setVelocityY((float) (-ball.getVelocityY()));
				mini1.setVelocityY((float) (-ball.getVelocityY()));
				

			} else if (ball.getVelocityY() > 0) {
				pipe1.stop();
				smasher1.stop();
				squeezer1.stop();

				pipe2.stop();
				smasher2.stop();
				squeezer2.stop();

			}
		}

		else if (world.isTimeMode()) {
			pipe1.setVelocityY(velY);
			smasher1.setVelocityY(velY);
			squeezer1.setVelocityY(velY);
			pipe2.setVelocityY(velY);
			smasher2.setVelocityY(velY);
			squeezer2.setVelocityY(velY);


		}

		if (pipe1.isScrolledDown() && pipe1.isCounted == false) {
			count++;
			pipe1.setCounted(true);

		} else if (pipe2.isScrolledDown() && pipe2.isCounted == false) {
			count++;
			pipe2.setCounted(true);
		}

		else if (smasher1.isScrolledDown() && smasher1.isCounted == false) {
			count++;
			smasher1.setCounted(true);

		} else if (smasher2.isScrolledDown() && smasher2.isCounted == false) {
			count++;
			smasher2.setCounted(true);

		} else if (squeezer1.isScrolledDown() && squeezer1.isCounted == false) {
			count++;
			squeezer1.setCounted(true);

		} else if (squeezer2.isScrolledDown() && squeezer2.isCounted == false) {
			count++;
			squeezer2.setCounted(true);

		}

		if (count == 3) {
			gaps.clear();
			for (int m = 1; m < 4; m++) {
				gaps.add(i * m - 500);

			}
			
			if (pipe1.isScrolledDown) {

				pipe1.reset(gaps.removeIndex(r.nextInt(gaps.size)));
			}
			if (pipe2.isScrolledDown) {

				pipe2.reset(gaps.removeIndex(r.nextInt(gaps.size)));
			}
			if (smasher1.isScrolledDown) {

				smasher1.reset(gaps.removeIndex(r.nextInt(gaps.size)));
			}
			if (squeezer1.isScrolledDown) {

				squeezer1.reset(gaps.removeIndex(r.nextInt(gaps.size)));
			}
			if (smasher2.isScrolledDown) {

				smasher2.reset(gaps.removeIndex(r.nextInt(gaps.size)));
			}
			if (squeezer2.isScrolledDown) {

				squeezer2.reset(gaps.removeIndex(r.nextInt(gaps.size)));
			}

			count = 0;
		}

		
	}

	public void stop() {
		pipe1.stop();
		pipe2.stop();
		smasher1.stop();
		smasher2.stop();
		squeezer1.stop();
		squeezer2.stop();
		maxi1.stop();
		mini1.stop();

	}

	public void onRestart() {
		count = 0;
		gaps.clear();
		for (int a = 1; a < 7; a++) {
			gaps.add((i * a) + 400);

		}
		pipe1.onRestart(gaps.removeIndex(r.nextInt(3)));
		pipe2.onRestart(gaps.removeIndex(0));
		
		squeezer1.onRestart(gaps.removeIndex(2));
		squeezer2.onRestart(gaps.removeIndex(0));
		smasher1.onRestart(gaps.removeIndex(r.nextInt(gaps.size)));
		smasher2.onRestart(gaps.removeIndex(r.nextInt(gaps.size)));
		maxi1.onRestart();
		mini1.onRestart();

	}

	public boolean collides(Ball ball) {

		return (pipe1.collides(ball) || pipe2.collides(ball)
				|| smasher1.collides(ball) || smasher2.collides(ball)
				|| squeezer1.collides(ball) || squeezer2.collides(ball));

	}
	
	public boolean collects(Ball ball) {

		if (Intersector.overlaps(maxi1.getBounds(), mini1.getBounds())){
			maxi1.reset(-r.nextInt(1000)-3500);
			mini1.reset(-r.nextInt(1000)-3500);
		}
		
		
		if (maxi1.collides(ball)){
			ball.setRadius(50);
			maxi1.reset(-r.nextInt(1000)-6500);
			mini1.reset(-r.nextInt(1000)-3500);

			AssetLoader.plus.play(AssetLoader.getVOLUMESOUND());
			
			return true;
			
		}
		
		else if (mini1.collides(ball)) {
			ball.setRadius(20);
			maxi1.reset(-r.nextInt(1000)-3500);
			mini1.reset(-r.nextInt(1000)-6500);

			AssetLoader.minus.play(AssetLoader.getVOLUMESOUND());
			
			return true;
		}
		
		
		return false;

	}
	
	public boolean collectedMax(Ball ball){
		return (maxi1.collides(ball));
	}
	
	public boolean collectedMin(Ball ball){
		return (mini1.collides(ball));
	}

	public TwoPipes getPipe1() {
		return pipe1;
	}

	public Smasher getSmasher1() {
		return smasher1;
	}

	public Squeezer getSquezzer1() {
		return squeezer1;
	}

	public TwoPipes getPipe2() {
		return pipe2;
	}

	public Smasher getSmasher2() {
		return smasher2;
	}

	public Squeezer getSquezzer2() {
		return squeezer2;
	}

	public float getVel() {
		return velY;
	}

	public void setVelY(float diff) {
		this.velY = 200 * diff;

	}

	public Specials getMaxi1() {
		return maxi1;
	}

	public Specials getMini1() {
		return mini1;
	}



}
